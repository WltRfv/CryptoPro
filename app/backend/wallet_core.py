from .database import db, Member, Team, Question, QuestionPurchase, Transfer
from datetime import datetime


class WalletCore:
    @staticmethod
    def get_team_dashboard(team_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}")

        team = Team.query.get(team_id)
        if not team:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        members = Member.query.filter_by(team_id=team_id).all()
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        available_questions = Question.query.filter_by(is_approved=True).all()
        print(f"üìö –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(available_questions)}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤—Å–µ, –¥–∞–∂–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)
        proposed_questions = Question.query.filter_by(is_approved=False).all()
        print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(proposed_questions)}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        purchased_questions_data = []
        purchased_questions = QuestionPurchase.query.filter_by(team_id=team_id).all()
        for purchase in purchased_questions:
            question = Question.query.get(purchase.question_id)
            purchaser = Member.query.get(purchase.purchased_by)
            if question and purchaser:
                purchased_questions_data.append({
                    'question': question,
                    'purchaser': purchaser,
                    'purchase': purchase
                })
        print(f"üõí –ö—É–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(purchased_questions_data)}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        transfers_data = []
        transfers = Transfer.query.filter_by(team_id=team_id).order_by(Transfer.transferred_at.desc()).limit(10).all()
        for transfer in transfers:
            from_member = Member.query.get(transfer.from_member_id)
            to_member = Member.query.get(transfer.to_member_id)
            if from_member and to_member:
                transfers_data.append({
                    'transfer': transfer,
                    'from_member': from_member,
                    'to_member': to_member
                })
        print(f"üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(transfers_data)}")

        return {
            'team': team,
            'members': members,
            'purchased_questions': purchased_questions_data,
            'proposed_questions': proposed_questions,
            'transfers': transfers_data,
            'available_questions': available_questions,
            'total_team_points': sum(member.points for member in members)
        }

    @staticmethod
    def purchase_question(question_id, member_id):
        """
        –ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        """
        member = Member.query.get(member_id)
        if not member:
            return False, "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        question = Question.query.get(question_id)
        if not question or not question.is_approved:
            return False, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω"

        if member.points < question.price:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –∫–æ–º–∞–Ω–¥–æ–π
        existing_purchase = QuestionPurchase.query.filter_by(
            question_id=question_id,
            team_id=member.team_id
        ).first()

        if existing_purchase:
            return False, "–í–æ–ø—Ä–æ—Å —É–∂–µ –∫—É–ø–ª–µ–Ω –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π"

        try:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            member.points -= question.price

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            purchase = QuestionPurchase(
                question_id=question_id,
                team_id=member.team_id,
                purchased_by=member_id
            )
            db.session.add(purchase)

            db.session.commit()
            return True, f"–í–æ–ø—Ä–æ—Å '{question.content}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ {question.price} –±–∞–ª–ª–æ–≤"

        except Exception as e:
            db.session.rollback()
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}"

    @staticmethod
    def transfer_points(from_member_id, to_member_id, amount):
        """
        –ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        """
        from_member = Member.query.get(from_member_id)
        if not from_member:
            return False, "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        to_member = Member.query.get(to_member_id)
        if not to_member:
            return False, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if from_member.team_id != to_member.team_id:
            return False, "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–∞–º"

        if from_member.points < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        if amount <= 0:
            return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            from_member.points -= amount
            to_member.points += amount

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–≤–æ–¥–µ
            transfer = Transfer(
                from_member_id=from_member_id,
                to_member_id=to_member_id,
                amount=amount,
                team_id=from_member.team_id
            )
            db.session.add(transfer)

            db.session.commit()
            return True, f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫—É {to_member.name}"

        except Exception as e:
            db.session.rollback()
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"

    @staticmethod
    def propose_question(content, price, member_id):
        """
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        """
        try:
            question = Question(
                content=content,
                price=price,
                is_approved=False,  # –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                created_by=member_id
            )
            db.session.add(question)
            db.session.commit()
            return True, "–í–æ–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        except Exception as e:
            db.session.rollback()
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
wallet_core = WalletCore()