"""from flask import current_app
from datetime import datetime, timedelta
import secrets
from .database import db, LoginSession, KeyShare, Team, Member
from .encryption_simple import shamir_manager, password_hasher
from .email_service import email_service
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from config import Config  # –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ö–õ–ê–°–° Config

class AuthManager:
    TEAM_EMAILS = Config.TEAM_EMAILS  # –ò–°–ü–û–õ–¨–ó–£–ï–ú Config.
    TEAM_MEMBERS = Config.TEAM_MEMBERS  # –ò–°–ü–û–õ–¨–ó–£–ï–ú Config.

    @staticmethod
    def initiate_team_login():

        #–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –≤—Å–µ email

        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—Ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã...")
            print(f"üìß –ü–æ—Ä—è–¥–æ–∫ email –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {AuthManager.TEAM_EMAILS}")

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            session_token = shamir_manager.generate_session_token()

            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            master_key = secrets.token_urlsafe(32)

            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞ 4 —á–∞—Å—Ç–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
            shares = shamir_manager.split_secret(master_key, shares=4, threshold=3)

            # –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∂–µ–º –∫–∞–∫–æ–π –∫–ª—é—á –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
            print("üîë –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô:")
            for i, email in enumerate(AuthManager.TEAM_EMAILS):
                print(f"  {email} ‚Üí –ö–ª—é—á {i + 1}: {shares[i][:20]}...")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏
            login_session = LoginSession(
                session_token=session_token,
                expires_at=datetime.utcnow() + timedelta(minutes=15)
            )
            db.session.add(login_session)
            db.session.flush()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –±–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
            email_count = 0
            for i, email in enumerate(AuthManager.TEAM_EMAILS):
                print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª—é—á–∞ {i + 1} –Ω–∞ {email}: {shares[i]}")
                key_share = KeyShare(
                    share=shares[i],
                    email=email,
                    share_order=i + 1,  # –ü–æ—Ä—è–¥–æ–∫ 1,2,3,4
                    session_id=login_session.id
                )
                db.session.add(key_share)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–ª—é—á–æ–º
                if email_service.send_key_share(email, shares[i], session_token):
                    email_count += 1
                    print(f"‚úÖ –ö–ª—é—á {i + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞ {i + 1} –Ω–∞ {email}")

            db.session.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            AuthManager._save_test_keys(shares, session_token)

            if email_count > 0:
                return session_token, f"–ö–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {email_count} email –∞–¥—Ä–µ—Å–æ–≤! –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt"
            else:
                return session_token, "–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email)"

        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ initiate_team_login: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            return "ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª—é—á–µ–π: {str(e)}"

    @staticmethod
    def _save_test_keys(shares, session_token):
        #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            with open('test_keys.txt', 'w', encoding='utf-8') as f:
                f.write("üîê –¢–ï–°–¢–û–í–´–ï –ö–õ–Æ–ß–ò –î–õ–Ø –í–•–û–î–ê –í –ö–†–ò–ü–¢–û-–ö–û–®–ï–õ–ï–ö\n")
                f.write("=" * 60 + "\n")
                f.write(f"–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏: {session_token}\n")
                f.write(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
                f.write("–ö–ª—é—á–∏ (–≤–≤–µ–¥–∏—Ç–µ –õ–Æ–ë–´–ï 3 –∏–∑ 4 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º email –∏ –Ω–æ–º–µ—Ä–∞
                emails = ["samonov.135@gmail.com", "galkinasnezana788@gmail.com",
                         "lesa85130@gmail.com", "pravolavika@gmail.com"]
                for i, share in enumerate(shares, 1):
                    f.write(f"–ö–ª—é—á {i} ({emails[i - 1]}): {share}\n")

                f.write("\nüí° –î–û–ü–£–°–¢–ò–ú–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò:\n")
                f.write("1-2-3, 1-2-4, 1-3-4, 2-3-4\n\n")
                f.write("üìã –¢–ï–°–¢–û–í–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ):\n")
                f.write(f"1-2-3: {shares[0]} {shares[1]} {shares[2]}\n")
                f.write(f"1-2-4: {shares[0]} {shares[1]} {shares[3]}\n")
                f.write(f"1-3-4: {shares[0]} {shares[2]} {shares[3]}\n")
                f.write(f"2-3-4: {shares[1]} {shares[2]} {shares[3]}\n")
                f.write("=" * 60 + "\n")

            print("‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt")
            print("üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª test_keys.txt —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–ª—é—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª: {e}")

    @staticmethod
    def verify_combined_key(entered_keys, session_token):

        #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 3 –∏–ª–∏ 4 –∫–ª—é—á–µ–π –°–¢–†–û–ì–û –ø–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º

        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_token}")
        print(f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: {entered_keys}")

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = LoginSession.query.filter_by(
            session_token=session_token,
            is_active=True
        ).first()

        if not session:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        if datetime.utcnow() > session.expires_at:
            session.is_active = False
            db.session.commit()
            return False, "–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
        all_shares = KeyShare.query.filter_by(
            session_id=session.id,
            is_used=False
        ).order_by(KeyShare.share_order).all()

        if len(all_shares) != 4:
            return False, "–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ –ë–î
        db_shares_dict = {share.share_order: share.share for share in all_shares}
        print(f"–ö–ª—é—á–∏ –≤ –ë–î: {db_shares_dict}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            reconstructed = shamir_manager.reconstruct_secret(entered_keys)

            # –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ë–î
            if reconstructed == "SUCCESS_SECRET_RECONSTRUCTED":
                # –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                for share in all_shares:
                    share.is_used = True
                    share.used_at = datetime.utcnow()

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                session.is_active = False
                db.session.commit()

                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã!")
                return True, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∫–æ—à–µ–ª–µ–∫!"
            else:
                return False, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª—é—á–µ–π"

        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π: {e}")
            return False, str(e)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π"

    @staticmethod
    def verify_personal_login(member_name, personal_password):

        #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—á–Ω—ã–π –ª–æ–≥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ—à–µ–ª—å–∫–∞)

        member = Member.query.filter_by(name=member_name).first()
        if member and password_hasher.verify_password(personal_password, member.personal_password):
            return member, True
        return None, False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auth_manager = AuthManager()"""


from flask import current_app
from datetime import datetime, timedelta
import secrets
from .database import db, LoginSession
from .signature_auth import signature_auth


class AuthManager:
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""

    @staticmethod
    def initiate_team_login():
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏"""
        return signature_auth.initiate_team_login()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
auth_manager = AuthManager()