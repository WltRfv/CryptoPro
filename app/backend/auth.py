from flask import current_app
from datetime import datetime, timedelta
import secrets
from .database import db, LoginSession, KeyShare, Team, Member
from .encryption import shamir_manager, password_hasher
from .email_service import email_service
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from config import TEAM_EMAILS, TEAM_MEMBERS


class AuthManager:
    TEAM_EMAILS = TEAM_EMAILS
    TEAM_MEMBERS = TEAM_MEMBERS

    @staticmethod
    def initiate_team_login():
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –≤—Å–µ email
        """
        print("üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—Ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã...")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        session_token = shamir_manager.generate_session_token()

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        master_key = secrets.token_urlsafe(24)

        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞ 4 —á–∞—Å—Ç–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        shares = shamir_manager.split_secret(master_key, shares=4, threshold=3)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏
        login_session = LoginSession(
            session_token=session_token,
            expires_at=datetime.utcnow() + timedelta(minutes=15)
        )
        db.session.add(login_session)
        db.session.flush()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –±–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
        email_count = 0
        for i, email in enumerate(AuthManager.TEAM_EMAILS):
            key_share = KeyShare(
                share=shares[i],
                email=email,
                share_order=i + 1,  # –ü–æ—Ä—è–¥–æ–∫ 1,2,3,4
                session_id=login_session.id
            )
            db.session.add(key_share)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–ª—é—á–æ–º
            if email_service.send_key_share(email, shares[i], session_token):
                email_count += 1

        db.session.commit()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        AuthManager._save_test_keys(shares, session_token)

        if email_count > 0:
            return session_token, f"–ö–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {email_count} email –∞–¥—Ä–µ—Å–æ–≤! –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt"
        else:
            return session_token, "–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email)"

    @staticmethod
    def _save_test_keys(shares, session_token):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with open('test_keys.txt', 'w', encoding='utf-8') as f:
                f.write("üîê –¢–ï–°–¢–û–í–´–ï –ö–õ–Æ–ß–ò –î–õ–Ø –í–•–û–î–ê –í –ö–†–ò–ü–¢–û-–ö–û–®–ï–õ–ï–ö\n")
                f.write("=" * 60 + "\n")
                f.write(f"–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏: {session_token}\n")
                f.write(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
                f.write("–ö–ª—é—á–∏ (–≤–≤–µ–¥–∏—Ç–µ –õ–Æ–ë–´–ï 3 –∏–∑ 4 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n")
                for i, share in enumerate(shares, 1):
                    f.write(f"–ö–ª—é—á {i}: {share}\n")
                f.write("\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:\n")
                f.write("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –õ–Æ–ë–´–ï 3 –∫–ª—é—á–∞ –∏–∑ 4\n")
                f.write("2. –í—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n")
                f.write("3. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 1:–∑–Ω–∞—á–µ–Ω–∏–µ 2:–∑–Ω–∞—á–µ–Ω–∏–µ 3:–∑–Ω–∞—á–µ–Ω–∏–µ\n")
                f.write("4. –ò–ª–∏: 1:–∑–Ω–∞—á–µ–Ω–∏–µ 2:–∑–Ω–∞—á–µ–Ω–∏–µ 4:–∑–Ω–∞—á–µ–Ω–∏–µ\n")
                f.write("=" * 60 + "\n")

            print("‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_keys.txt")
            print("üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª test_keys.txt —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–ª—é—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª: {e}")

    @staticmethod
    def verify_combined_key(entered_keys, session_token):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 3 –∏–ª–∏ 4 –∫–ª—é—á–µ–π
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_token}")

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = LoginSession.query.filter_by(
            session_token=session_token,
            is_active=True
        ).first()

        if not session:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        if datetime.utcnow() > session.expires_at:
            session.is_active = False
            db.session.commit()
            return False, "–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        all_shares = KeyShare.query.filter_by(
            session_id=session.id,
            is_used=False
        ).all()

        if len(all_shares) != 4:
            return False, "–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–π –ø–æ –ø–æ—Ä—è–¥–∫—É
        shares_dict = {share.share_order: share.share for share in all_shares}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 3 –∫–ª—é—á–µ–π
        valid_combinations = [
            [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]
        ]

        for combination in valid_combinations:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            if all(order in shares_dict for order in combination):
                # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                test_shares = [shares_dict[order] for order in combination]

                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á
                    reconstructed_key = shamir_manager.reconstruct_secret(test_shares)

                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –ø–æ–º–µ—á–∞–µ–º –∫–ª—é—á–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                    for order in combination:
                        key_share = KeyShare.query.filter_by(
                            session_id=session.id,
                            share_order=order,
                            is_used=False
                        ).first()
                        if key_share:
                            key_share.is_used = True
                            key_share.used_at = datetime.utcnow()

                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                    session.is_active = False
                    db.session.commit()

                    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã!")
                    return True, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∫–æ—à–µ–ª–µ–∫!"

                except ValueError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ {combination}: {e}")
                    continue

        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª—é—á–µ–π. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–∞."

    @staticmethod
    def verify_personal_login(member_name, personal_password):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—á–Ω—ã–π –ª–æ–≥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ—à–µ–ª—å–∫–∞)
        """
        member = Member.query.filter_by(name=member_name).first()
        if member and password_hasher.verify_password(personal_password, member.personal_password):
            return member, True
        return None, False


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auth_manager = AuthManager()