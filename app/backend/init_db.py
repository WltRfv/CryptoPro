from .database import db, Team, User, Question
from .encryption import password_hasher
from datetime import datetime


def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    db.drop_all()
    db.create_all()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    teams_data = [
        {'name': '–ö–æ–º–∞–Ω–¥–∞_–ê–ª—å—Ñ–∞', 'total_points': 1000},
        {'name': '–ö–æ–º–∞–Ω–¥–∞_–ë–µ—Ç–∞', 'total_points': 800},
        {'name': '–ö–æ–º–∞–Ω–¥–∞_–ì–∞–º–º–∞', 'total_points': 1200},
    ]

    teams = []
    for team_data in teams_data:
        team = Team(
            name=team_data['name'],
            total_points=team_data['total_points']
        )
        db.session.add(team)
        teams.append(team)

    db.session.flush()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–£–ë–ò–†–ê–ï–ú password_hash)
    users_data = [
        # –ö–æ–º–∞–Ω–¥–∞ –ê–ª—å—Ñ–∞ (4 —á–µ–ª–æ–≤–µ–∫–∞)
        {'username': 'alex_alpha', 'email': 'alex.alpha@university.com', 'personal_password': 'pass123', 'points': 250,
         'team_id': teams[0].id},
        {'username': 'maria_alpha', 'email': 'maria.alpha@university.com', 'personal_password': 'pass123',
         'points': 250, 'team_id': teams[0].id},
        {'username': 'ivan_alpha', 'email': 'ivan.alpha@university.com', 'personal_password': 'pass123', 'points': 250,
         'team_id': teams[0].id},
        {'username': 'olga_alpha', 'email': 'olga.alpha@university.com', 'personal_password': 'pass123', 'points': 250,
         'team_id': teams[0].id},

        # –ö–æ–º–∞–Ω–¥–∞ –ë–µ—Ç–∞ (3 —á–µ–ª–æ–≤–µ–∫–∞)
        {'username': 'dmitry_beta', 'email': 'dmitry.beta@university.com', 'personal_password': 'pass123',
         'points': 300, 'team_id': teams[1].id},
        {'username': 'anna_beta', 'email': 'anna.beta@university.com', 'personal_password': 'pass123', 'points': 250,
         'team_id': teams[1].id},
        {'username': 'sergey_beta', 'email': 'sergey.beta@university.com', 'personal_password': 'pass123',
         'points': 250, 'team_id': teams[1].id},

        # –ö–æ–º–∞–Ω–¥–∞ –ì–∞–º–º–∞ (4 —á–µ–ª–æ–≤–µ–∫–∞)
        {'username': 'ekaterina_gamma', 'email': 'ekaterina.gamma@university.com', 'personal_password': 'pass123',
         'points': 300, 'team_id': teams[2].id},
        {'username': 'pavel_gamma', 'email': 'pavel.gamma@university.com', 'personal_password': 'pass123',
         'points': 300, 'team_id': teams[2].id},
        {'username': 'natalia_gamma', 'email': 'natalia.gamma@university.com', 'personal_password': 'pass123',
         'points': 300, 'team_id': teams[2].id},
        {'username': 'mikhail_gamma', 'email': 'mikhail.gamma@university.com', 'personal_password': 'pass123',
         'points': 300, 'team_id': teams[2].id},
    ]

    for user_data in users_data:
        user = User(
            username=user_data['username'],
            email=user_data['email'],
            personal_password=password_hasher.hash_password(user_data['personal_password']),
            points=user_data['points'],
            team_id=user_data['team_id']
        )
        db.session.add(user)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_data = [
        {'content': '–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω –∏ –∫–∞–∫ –æ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?', 'price': 100, 'is_approved': True},
        {'content': '–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã Proof-of-Work vs Proof-of-Stake', 'price': 150, 'is_approved': True},
        {'content': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏?', 'price': 120, 'is_approved': True},
        {'content': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ?', 'price': 200, 'is_approved': True},
        {'content': '–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏', 'price': 80, 'is_approved': True},
        {'content': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö?', 'price': 180, 'is_approved': False},
        {'content': '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã (DeFi)?', 'price': 220, 'is_approved': True},
        {'content': '–û–±—ä—è—Å–Ω–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∑–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è Lightning Network', 'price': 250, 'is_approved': True},
    ]

    for i, question_data in enumerate(questions_data):
        question = Question(
            content=question_data['content'],
            price=question_data['price'],
            is_approved=question_data['is_approved'],
            created_by=1 if i % 3 == 0 else 2
        )
        db.session.add(question)

    try:
        db.session.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("üìä –°–æ–∑–¥–∞–Ω–æ:")
        print(f"   - –ö–æ–º–∞–Ω–¥: {len(teams)}")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
        print(f"   - –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions_data)}")

        print("\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:")
        print("   –ö–æ–º–∞–Ω–¥–∞ '–ö–æ–º–∞–Ω–¥–∞_–ê–ª—å—Ñ–∞':")
        for user in users_data[:4]:
            print(f"   - {user['username']} / {user['personal_password']}")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise