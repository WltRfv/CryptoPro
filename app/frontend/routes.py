from flask import Blueprint, render_template, request, jsonify, flash, redirect, url_for
from flask_login import login_user, logout_user, current_user, login_required
from app.backend.auth import auth_manager
from app.backend.wallet_core import wallet_core
from app.backend.database import Member, Team

bp = Blueprint('frontend', __name__)


@bp.route('/')
def index():
    return redirect(url_for('frontend.team_login'))


@bp.route('/team-login', methods=['GET', 'POST'])
def team_login():
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏"""
    print("üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ team-login")
    session_token = None
    challenge_message = None

    if request.method == 'POST':
        print("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å RSA –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        try:
            from app.backend.signature_auth import signature_auth
            result = signature_auth.initiate_team_login()
            if result and len(result) == 2:
                session_token, challenge_message = result
                flash("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–¥–ø–∏—à–∏—Ç–µ challenge-—Å–æ–æ–±—â–µ–Ω–∏–µ.", 'success')
            else:
                flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 'error')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ team_login: {e}")
            flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", 'error')

    # –í–´–•–û–î–ò–ú –ò–ó –°–ò–°–¢–ï–ú–´ –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´ –í–•–û–î–ê
    if current_user.is_authenticated:
        logout_user()
        print("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞")

    return render_template('team_login.html',
                         session_token=session_token,
                         challenge_message=challenge_message)


@bp.route('/verify-keys', methods=['POST'])
def verify_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"""
    print("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π...")
    session_token = request.form.get('session_token')
    keys_input = request.form.get('keys_input')

    print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: session_token={session_token}, keys_input={keys_input}")

    if not session_token or not keys_input:
        return jsonify({'success': False, 'message': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'})

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º
    shares = [key.strip() for key in keys_input.replace(',', ' ').split() if key.strip()]

    if len(shares) < 3:
        return jsonify({'success': False, 'message': '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∫–ª—é—á–∞'})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    success, message = auth_manager.verify_combined_key(shares, session_token)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: success={success}, message={message}")

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞)
        team = Team.query.first()
        if team:
            # –ù–ï –í–•–û–î–ò–ú –í –°–ò–°–¢–ï–ú–£ –ö–ê–ö –£–ß–ê–°–¢–ù–ò–ö - —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ—à–µ–ª—å–∫—É
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π - –¥–æ—Å—Ç—É–ø –∫ –∫–æ—à–µ–ª—å–∫—É –ø–æ–ª—É—á–µ–Ω")

            # –£–ë–ï–ñ–î–ê–ï–ú–°–Ø –ß–¢–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù
            if current_user.is_authenticated:
                logout_user()
                print("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∫–æ—à–µ–ª–µ–∫")

            return jsonify({
                'success': True,
                'message': message,
                'redirect_url': url_for('frontend.dashboard', team_id=team.id)
            })
        else:
            return jsonify({'success': False, 'message': '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    else:
        return jsonify({'success': False, 'message': message})


@bp.route('/personal-login', methods=['GET', 'POST'])
def personal_login():
    """–õ–∏—á–Ω—ã–π –≤—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    if request.method == 'POST':
        member_name = request.form.get('member_name')
        personal_password = request.form.get('personal_password')

        member, is_valid = auth_manager.verify_personal_login(member_name, personal_password)
        if is_valid and member:
            login_user(member)
            flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.name}!', 'success')
            return redirect(url_for('frontend.dashboard', team_id=member.team_id))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('personal_login.html')


@bp.route('/dashboard/<int:team_id>')
def dashboard(team_id):
    """–î–∞—à–±–æ—Ä–¥ –∫–æ–º–∞–Ω–¥—ã"""
    print(f"üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}")
    dashboard_data = wallet_core.get_team_dashboard(team_id)
    print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞: {dashboard_data is not None}")

    if not dashboard_data:
        flash('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('frontend.team_login'))

    try:
        return render_template('dashboard.html', **dashboard_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}"


@bp.route('/purchase-question', methods=['POST'])
@login_required
def purchase_question():
    """–ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    if not current_user.is_authenticated:
        flash('–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'error')
        return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))

    question_id = request.form.get('question_id')
    success, message = wallet_core.purchase_question(question_id, current_user.id)

    if success:
        flash(message, 'success')
    else:
        flash(message, 'error')

    return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))


@bp.route('/transfer-points', methods=['POST'])
@login_required
def transfer_points():
    """–ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ –∏–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_authenticated:
        flash('–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'error')
        return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))

    transfer_type = request.form.get('transfer_type', 'regular')  # 'regular' –∏–ª–∏ 'teacher_reward'
    to_member_id = request.form.get('to_member_id')
    amount = request.form.get('amount')
    teacher_password = request.form.get('teacher_password', '')

    try:
        amount = int(amount)
    except ValueError:
        flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', 'error')
        return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))

    if transfer_type == 'teacher_reward':
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        success, message = wallet_core.reward_points(current_user.id, to_member_id, amount, teacher_password)
    else:
        # –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        success, message = wallet_core.transfer_points(current_user.id, to_member_id, amount)

    if success:
        flash(message, 'success')
    else:
        flash(message, 'error')

    return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))


@bp.route('/propose-question', methods=['POST'])
@login_required
def propose_question():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    if not current_user.is_authenticated:
        flash('–î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'error')
        return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))

    content = request.form.get('content')
    price = request.form.get('price')

    try:
        price = int(price)
    except ValueError:
        flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞', 'error')
        return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))

    success, message = wallet_core.propose_question(content, price, current_user.id)

    if success:
        flash(message, 'success')
    else:
        flash(message, 'error')

    return redirect(url_for('frontend.dashboard', team_id=current_user.team_id))


@bp.route('/logout')
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('frontend.team_login'))


@bp.route('/verify-signature', methods=['POST'])
def verify_signature():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å...")

    session_token = request.form.get('session_token')
    member_name = request.form.get('member_name')
    signature = request.form.get('signature')

    print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: session_token={session_token}, member={member_name}")

    if not all([session_token, member_name, signature]):
        return jsonify({'success': False, 'message': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'})

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    from app.backend.signature_auth import signature_auth
    success, message = signature_auth.verify_member_signature(session_token, member_name, signature)

    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: success={success}, message={message}")

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞)
        team = Team.query.first()
        if team:
            return jsonify({
                'success': True,
                'message': message,
                'redirect_url': url_for('frontend.dashboard', team_id=team.id)
            })
        else:
            return jsonify({'success': False, 'message': '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
    else:
        return jsonify({'success': False, 'message': message})


@bp.route('/signing-tool')
def signing_tool():
    """–í–µ–±-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ - CryptoPro</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            textarea { width: 100%; height: 100px; margin: 10px 0; }
            button { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ RSA</h1>
            <p>–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º.</p>

            <h3>üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
            <ol>
                <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: <code>python tools/signing_tool.py</code></li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á</li>
                <li>–í—Å—Ç–∞–≤—å—Ç–µ challenge-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∞–π—Ç</li>
            </ol>

            <p><strong>üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:</strong></p>
            <code style="background: #f0f0f0; padding: 10px; display: block; border-radius: 5px;">
                cd D:\\Cryptopro<br>
                python tools/signing_tool.py
            </code>
        </div>
    </body>
    </html>
    """